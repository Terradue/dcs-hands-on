#!/bin/bash

# source the ciop functions (e.g. ciop-log)
source ${ciop_job_include}

export BEAM_HOME=/opt/beam-5.0
export PATH=${BEAM_HOME}/bin:${PATH}

# define the exit codes
SUCCESS=0
ERR_NOINPUT=1
ERR_BINNING=2
ERR_NOPARAMS=5
ERR_JPEGTMP=7
ERR_BROWSE=9
ERR_INPUT_TAR=10
ERR_INPUT_COPY=11
ERR_NO_PUBLISH=12
ERR_PCONVERT=13

# add a trap to exit gracefully
function cleanExit ()
{
   local retval=$?
   local msg=""
   case "${retval}" in
    ${SUCCESS})      msg="Processing successfully concluded";;
    ${ERR_BINNING})  msg="Error while executing gpt";;
    ${ERR_PCONVERT}) msg="Error while executing pconvert";;
    ${ERR_NOPARAMS})   msg="Output format not defined";;
    ${ERR_GDAL})       msg="Graph processing of job ${JOBNAME} failed (exit code ${res})";;
    ${ERR_NO_PUBLISH}) msg="Error while publishing results";;
    ${ERR_INPUT_COPY}) msg="Error while retrieving input";;
    ${ERR_INPUT_TAR})  msg="Error while untarring input";;
    ${ERR_JPEGTMP})    msg="Error while creating jpeg";;
    ${ERR_BROWSE})     msg="Error while creating browse";;
     *)             msg="Unknown error";;
   esac
   [ "$retval" != "0" ] && ciop-log "ERROR" "Error ${retval} - ${msg}, processing aborted" || ciop-log "INFO" "${msg}"
   exit ${retval}
}
trap cleanExit EXIT

function get_data() {
  local list
  list="$1"

  prod=$( echo $list | ciop-copy -U -o ${TMPDIR}/input - )
  # checking if the copy was successfull
  [ $? -eq 0 ] && [ -n "${prod}" ] || return ${ERR_INPUT_COPY}
  
  cd $TMPDIR/input
  tar xfz `basename ${list}`
  # let's check the return value
  [ $? -eq 0 ] || return ${ERR_INPUT_TAR}

  cd - &> /dev/null
}

function create_request_xml(){
  local binning_file
  local outputname

  binning_file="$1"
  outputname="$2"
  
  # retrieve the parameters value from workflow or job default value
  bandname="$( ciop-getparam bandname )"
  bitmask="$( ciop-getparam bitmask )"
  bbox="$( ciop-getparam bbox )"
  algorithm="$( ciop-getparam algorithm )"

  # split the bounding value
  xmin=$( echo ${bbox} | cut -d "," -f 1 )
  ymin=$( echo ${bbox} | cut -d "," -f 2 )
  xmax=$( echo ${bbox} | cut -d "," -f 3 )
  ymax=$( echo ${bbox} | cut -d "," -f 4 )


  # create the Binning graph
  cat > ${binning_file} << EOF
<?xml version="1.0" encoding="UTF-8"?>
<graph id="someGraphId">
  <version>1.0</version>
    <node id="someNodeId">
        <operator>Binning</operator>
    <parameters>
        <sourceProductPaths>$( find ${TMPDIR}/input -name "*.dim" | tr "\n" "," )</sourceProductPaths>
        <region class="com.vividsolutions.jts.geom.Polygon">POLYGON ((${xmin} ${ymin}, ${xmax} ${ymin}, ${xmax} ${ymax}, ${xmin} ${ymax}, ${xmin} ${ymin}))</region>
        <timeFilterMethod>NONE</timeFilterMethod>
        <numRows>2160</numRows>
        <superSampling>1</superSampling>
        <maskExpr></maskExpr>
        <variables/>
        <aggregators>
            <aggregator>
                <type>$algorithm</type>
                <varName>$bandname</varName>
                <targetName></targetName>
            </aggregator>
        </aggregators>
        <outputFile>${TMPDIR}/${outputname}/${outputname}.dim</outputFile>
    </parameters>
  </node>
</graph>
EOF

cat ${binning_file}
}


function main(){
  # main function

  outputname="$( ciop-getparam outputname )"
  binning_file=${TMPDIR}/binning_request.xml

  # create a folder based on the outputname
  mkdir ${TMPDIR}/${outputname}

  # creates the request xml
  create_request_xml "${binning_file}" "${outputname}"

  # invoke BEAM gpt with the created graph
  ciop-log "INFO" "Binning products"
  gpt.sh ${binning_file} 
  [ "$?" == "0" ] || exit ${ERR_BINNING}

  ciop-log "INFO" "Compressing and publishing binned DIMAP product"
  cd ${TMPDIR}/${outputname}
  tar -czf ${outputname}.tgz ${outputname}.*
  # stage-out the binned product
  cd - &> /dev/null
  ciop-publish -m ${TMPDIR}/${outputname}/${outputname}.tgz
  ciop-log "INFO" "Generating image files"

  # stage-out the binned product
  ciop-publish -m ${TMPDIR}/${outputname}/${outputname}.tgz

  ciop-log "INFO" "Generating image files"

  cat > ${TMPDIR}/palette.cpd << EOF
$( ciop-getparam palette )
EOF
  for entry in "${TMPDIR}/${outputname}"/* 
  do
      echo "$entry"
  done
  # png file
  pconvert.sh -f png -b 3 ${TMPDIR}/${outputname}/${outputname}.dim -c ${TMPDIR}/palette.cpd -o ${TMPDIR}/${outputname} &> /dev/null
  [ "$?" == "0" ] || exit $ERR_PCONVERT
  ciop-publish -m ${TMPDIR}/${outputname}/${outputname}.png &> /dev/null

  # rgb tif file
  pconvert.sh -f tif -b 3 ${TMPDIR}/${outputname}/${outputname}.dim -c ${TMPDIR}/palette.cpd -o ${TMPDIR}/${outputname} &> /dev/null
  [ "$?" == "0" ] || exit $ERR_PCONVERT
  mv ${TMPDIR}/${outputname}/${outputname}.tif ${TMPDIR}/${outputname}/${outputname}_rgb.tif
  ciop-publish -m ${TMPDIR}/${outputname}/${outputname}_rgb.tif &> /dev/null

  # tif file
  pconvert.sh -f tif -b 3 ${TMPDIR}/${outputname}/${outputname}.dim -o ${TMPDIR}/${outputname} &> /dev/null
  [ "$?" == "0" ] || exit $ERR_PCONVERT
  ciop-publish -m ${TMPDIR}/${outputname}/${outputname}.tif &> /dev/null

}


mkdir -p $TMPDIR/input
mkdir -p $TMPDIR/output

while read product
do
    get_data "${product}"
done

main || exit $?
