#!/bin/bash

# source the ciop functions (e.g. ciop-log, ciop-getparam)
source ${ciop_job_include}

# set the environment variables to use ESA BEAM toolbox
export BEAM_HOME=/opt/beam-5.0
export PATH=${BEAM_HOME}/bin:${PATH}

# define the exit codes
SUCCESS=0
BEAM_REQUEST_ERROR=1
ERR_BEAM=2
ERR_NOEXPR=3
ERR_NOINPUT=4

# add a trap to exit gracefully
function cleanExit ()
{
    local retval=$?
    local msg=""

    case ${retval} in
        ${SUCCESS})            msg="Processing successfully concluded";;
        ${BEAM_REQUEST_ERROR}) msg="Could not create beam request file";;
        ${ERR_BEAM})           msg="Beam_expr failed to process product $( basename $product )";;
        ${ERR_NOEXPR})         msg="No expression provided";;
        ${ERR_NOINPUT})        msg="No input provided";;
        *)                     msg="Unknown error";;
    esac

   [ ${retval} -ne 0 ] && ciop-log "ERROR" "Error ${retval} - ${msg}, processing aborted" || ciop-log "INFO" "${msg}"
   exit ${retval}
}

trap cleanExit EXIT

function create_beam_request() {
    # function which creates the actual request from
    # a template and returns the path to the request
    local expression
    local filename

    expression="$1"
    input_filename="$2"
    output_filename="$3"

    #sets the output filename
    beam_request_filename="${TMPDIR}/$( uuidgen ).xml"

   cat << EOF > ${beam_request_filename}
<?xml version="1.0" encoding="UTF-8"?>
<graph>
  <version>1.0</version>
  <node id="1">
    <operator>Read</operator>
      <parameters>
        <file>${input_filename}</file>
      </parameters>
  </node>
  <node id="2">
    <operator>BandMaths</operator>
    <sources>
      <source>1</source>
    </sources>
    <parameters>
      <targetBands>
        <targetBand>
          <name>out</name>
          <expression>${expression}</expression>
          <description>Processed Band</description>
          <type>float32</type>
        </targetBand>
      </targetBands>
    </parameters>
  </node>
  <node id="write">
    <operator>Write</operator>
    <sources>
       <source>2</source>
    </sources>
    <parameters>
      <file>${output_filename}</file>
   </parameters>
  </node>
</graph>
EOF

    [ $? -eq 0 ] && {
        echo "${beam_request_filename}"
        return 0
    } || return ${BEAM_REQUEST_ERROR}
}

function main() {
    #defines the input
    local inputfile
    inputfile="$1"

    # band arithmetic expression for ESA BEAM Toolbox
    expression="l1_flags.INVALID?0:radiance_13>17?0:100+radiance_9-(radiance_8+(radiance_10-radiance_8)*27.524/72.570)"

    # log the value, it helps debugging. 
    # the log entry is available in the process stderr 
    ciop-log "DEBUG" "The expression used is: ${expression}"

    # report activity in log
    ciop-log "INFO" "Retrieving $inputfile from storage"

    # retrieve the MER_RR__1P product to the local temporary folder TMPDIR provided by the framework (this folder is only used by this process)
    # the ciop-copy utility will use one of online resource available in the metadata to copy it to the TMPDIR folder
    # the utility returns the local path so the variable $retrieved contains the local path to the MERIS product
    retrieved=$( ciop-copy -o $TMPDIR "$inputfile" )

    # check if the file was retrieved, if not exit with the error code $ERR_NOINPUT
    [ $? -eq 0 ] && [ -e "${retrieved}" ] || return ${ERR_NOINPUT}

    outputname=$( basename "$retrieved" )

    # report activity in the log
    ciop-log "INFO" "Retrieved ${outputname}, moving on to expression"

    # prepare the BEAM request
    BEAM_REQUEST=$( create_beam_request "${expression}" "${retrieved}" "${OUTPUTDIR}/${outputname}" )
    [ $? -eq 0 ] || return ${BEAM_REQUEST_ERROR}

    # invoke the ESA BEAM toolbox
    gpt.sh $BEAM_REQUEST &> /dev/null

    # check the exit code
    [ $? -eq 0 ] || return $ERR_BEAM

    # compress the ESA BEAM results
    outputfolder="${outputname}.data"
    outputname="${outputname}.dim"

    tar cfz ${OUTPUTDIR}/${outputname}.tgz ${OUTPUTDIR}/${outputname} ${OUTPUTDIR}/${outputfolder} &> /dev/null
  
    # publish the compressed results
    ciop-log "INFO" "Publishing ${outputname}.dim and ${outputname}.data" 
    ciop-publish $OUTPUTDIR/$outputname.tgz

    # cleanup
    rm -rf ${retrieved} ${OUTPUTDIR}/${outputname}.d* ${OUTPUTDIR}/${outputname}.tgz 

    return ${SUCCESS}
}

# create the output folder to store the output products and export it
mkdir -p ${TMPDIR}/output
export OUTPUTDIR=${TMPDIR}/output

while read inputfile; do
    main "${inputfile}"
    res=$?
    [ ${res} -ne 0 ] && exit ${res}
done

exit $SUCCESS
